name: Grafology

defaults:
  run:
    shell: pwsh

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        # ubuntu-24.04 and not ubuntu-latest (22.04) as we need gcc-14
        os: [ubuntu-24.04, windows-latest, macos-15]
        build_type: [Release]
        compiler: [gcc, cl]
        include:
          - os: windows-latest
            preset: windows-x64-Release
            compiler: cl
            c_compiler: cl
            cpp_compiler: cl
            python: python
            output_dir: bin/windows/Release
          - os: macos-15
            preset: osx-arm64-Release
            compiler: gcc
            c_compiler: gcc-14
            cpp_compiler: g++-14
            python: python3
            output_dir: bin/osx/Release
          - os: ubuntu-24.04
            preset: linux-x64-Release
            compiler: gcc
            c_compiler: gcc-14
            cpp_compiler: g++-14
            python: python3
            output_dir: bin/linux/Release
          # requires clang-19 which is not currently available on the GitHub images
          # - os: ubuntu-24.04
          #   preset: linux-x64-Release
          #   compiler: clang
          #   c_compiler: clang-19
          #   cpp_compiler: clang++-19
          #   output_dir: bin/linux/Release
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: ubuntu-24.04
            compiler: cl
          - os: macos-15
            compiler: cl

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install missing dependencies
      run: |
        if ("${{ matrix.os }}".startsWith("ubuntu")) {
          sudo apt install ninja-build
        }
        elseif ("${{ matrix.os }}".startsWith("macos")) {
          brew install ninja
          brew install vcpkg
          $VCPKG_ROOT="${{ github.workspace }}/tmp/vcpkg"
          git clone https://github.com/microsoft/vcpkg $VCPKG_ROOT
        }
        ${{ matrix.python }} -m pip install 

    - name: Build
      run: |
        cd ${{github.workspace}}
        if ("${{ matrix.os }}".startsWith("windows")) {
          ./scripts/vs-setup.ps1 -Version 2022 -Edition Enterprise -Bits 64
        }
        elseif ("${{ matrix.os }}".startsWith("macos")) {
          $env:VCPKG_ROOT="${{ github.workspace }}/tmp/vcpkg"
        }
        ./scripts/build.ps1 -BuildTypes ${{ matrix.build_type }} -CC ${{ matrix.c_compiler }} -CPP ${{ matrix.cpp_compiler }} -Clean -RootDir "${{ github.workspace }}"

    - name: Test
      run: |
        cd ${{github.workspace}}/${{ matrix.output_dir }}/tests
        ./tests
